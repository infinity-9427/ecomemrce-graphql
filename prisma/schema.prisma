// schema.prisma
// Learn more about Prisma schema: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int         @id @default(autoincrement())
  title       String
  description String
  price       Float
  // Store images as a JSON array of objects { public_id, url }
  images      Json
  // A product can belong to many categories
  categories  ProductCategory[]
  // A product can appear in many order items and cart items
  orderItems  OrderItem[]
  cartItems   CartItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  // Many-to-many relation with products via join table
  products   ProductCategory[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

// Join table for the many-to-many relation between Product and Category
model ProductCategory {
  product   Product   @relation(fields: [productId], references: [id])
  productId Int
  category  Category  @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([productId, categoryId])
}

model User {
  id        Int       @id @default(autoincrement())
  name      String?
  email     String    @unique
  password  String
  role      UserRole  @default(USER)
  // A user can have many orders
  orders    Order[]
  // Each user has a single cart (one-to-one)
  cart      Cart?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  // One order can include multiple order items
  orderItems  OrderItem[]
  total       Float
  status      OrderStatus @default(PENDING)
  // Optional payment info
  payment     Payment?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int      @default(1)
  // Capture the price at time of order
  price      Float
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  cartItems CartItem[]
  updatedAt DateTime   @default(now()) @updatedAt
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cart       Cart     @relation(fields: [cartId], references: [id])
  cartId     Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int      @default(1)
}

model Payment {
  id             Int           @id @default(autoincrement())
  order          Order         @relation(fields: [orderId], references: [id])
  orderId        Int           @unique
  amount         Float
  method         PaymentMethod
  status         PaymentStatus @default(PENDING)
  transactionId  String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  STRIPE
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
